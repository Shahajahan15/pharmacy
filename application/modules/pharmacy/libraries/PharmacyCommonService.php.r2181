<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

//--------------------------------------------------------------------
/**
 * Summary
 * @param string	 $resultType[optional]	The resultType value will be "Object" or "Array", DEFAULT value "Array"
 * @return By DEFAULT return Array Otherwise Object
 * */
//--------------------------------------------------------------------

class PharmacyCommonService{

    private $CI;
    private $c_user;

    public function __construct() {
    	$this->CI = & get_instance();
    	$this->CI->load->helper('url');
        $this->CI->load->library('session');
        $this->CI->config->item('base_url');
        $this->CI->load->database();
       // $this->c_user =$this->auth->user();
    }
    
    /*    stock   
	   
		product id (arry),qnty(array),source = (1= sale), type (3= pharmacy main stock),stock(1= in , 2= out)
	*/
    
    public function stock($source_id, $product_id, $qnty, $source, $type, $stock_in_out, $user, $requ_issue_pharmacy_id = 0, $sub_pharmacy_id = 0)
    {
		$count = count($product_id);
		if ($type == 1) {
			$mst_table = 'bf_pharmacy_stock_mst';
			$dtls_table = 'bf_pharmacy_stock_dtls';
			$main_table = 'bf_pharmacy_stock';
			$source_out_in_id = ($stock_in_out == 2) ? 'stock_source_out_id' : 'stock_source_in_id';
			$mst_data = array(
				$source_out_in_id => $source_id,
				'type' => $stock_in_out,
				'source' => $source,
				'pharmacy_id' => 200,
				'issue_requ_pharmacy_id' => $requ_issue_pharmacy_id,
				'created_by' => $user->id,
			);
		} elseif ($type == 2){
			$mst_table = 'bf_pharmacy_indoor_stock_mst';
			$dtls_table = 'bf_pharmacy_indoor_stock_dtls';
			$main_table = 'bf_pharmacy_indoor_stock';
			$source_out_in_id = ($stock_in_out == 2) ? 'store_source_out_id' : 'store_source_in_id';
			if ($source == 2) {
				$issue_pharmacy_id = 200;
				$req_pharmacy_id = $requ_issue_pharmacy_id;
			}
			$mst_data = array(
				'pharmacy_id' => ($user->pharmacy_id) ? $user->pharmacy_id : $sub_pharmacy_id,
				'issue_requ_pharmacy_id' => $requ_issue_pharmacy_id,
				$source_out_in_id => $source_id,
				'type' => $stock_in_out,
				'source' => $source,
				'created_by' => $user->id,
			);
		}
			/*     master table  insert   */
			
            $this->CI->db->insert($mst_table, $mst_data);
            $master_id = $this->CI->db->insert_id();
            
            /* dtls table insert */
            for($i = 0; $i < $count; $i++){
            	if ($qnty[$i]) {
            	$dlts_data = array(
            		'stock_mst_id' => $master_id,
            		'product_id' => $product_id[$i],
            		'quantity' => $qnty[$i],
            	);
            	$this->CI->db->insert($dtls_table,$dlts_data);
            }
            	/*     main stock insert  */
            	$this->main_stock($product_id[$i],$qnty[$i],$main_table,$type,$stock_in_out, $user, $sub_pharmacy_id);
            }
	}
	
	public function main_stock($product_id, $qnty, $main_table,$type,$stock_in_out, $user, $sub_pharmacy_id = 0)
	{
		if ($type == 1) {
			$where = array(
			'product_id' => $product_id,
		);
		} elseif ($type == 2){
			$where = array(
			'product_id' => $product_id,
			'pharmacy_id' => ($user->pharmacy_id) ? $user->pharmacy_id : $sub_pharmacy_id
		);
		}
		
		$stock_product=$this->CI->db
					->where($where)
					->get($main_table)
					->row();

	        if($stock_product){
	            $stock_update['quantity_level']=($stock_in_out == 1) ? ($stock_product->quantity_level + $qnty) : ($stock_product->quantity_level - $qnty);
	            $this->CI->db->where('id',$stock_product->id)->update($main_table, $stock_update);
	        }else{
	        	if ($type == 2){
					$stock_update['pharmacy_id']= ($user->pharmacy_id) ? $user->pharmacy_id : $sub_pharmacy_id;
				}
	            
	            $stock_update['quantity_level']=$qnty;
	            $stock_update['product_id']=$product_id;
	            $this->CI->db->insert($main_table,$stock_update);
	        }
	}


	public function discount_product($product_id=0,$date=0,$onlyPercent=0){
    	if(!$date){
    		$date=date('Y-m-d');    		
    	}
    	$record=$this->CI->db
    					->where('discount_from <=',$date)
    					->where('discount_to >=',$date)
    					->where("(product_id = $product_id OR discount_type = 1 )")
    					->order_by('id','DESC')
    					->get('bf_pharmacy_discount')
    					->row(); 
    	$result =  $record; 	
        if(!isset($record->discount_parcent)){
            $result = 0;
        }     

        if($onlyPercent){
        	$result = isset($record->discount_parcent) ? $record->discount_parcent : 0;
        }
    	return $result;
    }

    public function discount_emp_doctor($customer_type = 0, $discount_for)
    {
    	$date=date('Y-m-d');  
    	$result = $this->CI->db
    			  		->where('start_date <=',$date)
    					->where('end_date >=',$date)
    					->where('customer_type',$customer_type)
    					->where('discount_for', $discount_for)
    					->where('status', 1)
    					->order_by('id','DESC')
    					->get('bf_lib_customer_discount')
    					->row(); 

    	if (!$result || $result->discount_parcent == 0) {
    		return $result = 0;
    	}
    	return $result;

    	// return (float)$result->discount_parcent;
    }

    public function normal_discount()
    {
    	$date=date('Y-m-d');
    	$result=$this->CI->db 
    				 ->where('discount_from <=',$date)
    				 ->where('discount_to >=',$date)
    				 ->order_by('id','desc')
    				 ->get('bf_pharmacy_discount')
    				 ->row();
    	if(!$result || $result->discount_parcent==0){
    		return $result=0;
    	}
    	return $result;
    }
    
    public function getSaleNo($type, $user)
    {
		if ($type == 1) {
			$table = "pharmacy_sales_mst";
			$where = array(
				'date(created_date)' => date('Y-m-d')
			);
			$ph = "P";
			$len = 7;
		} else {
			$table = "pharmacy_indoor_sales_mst";
			$where = array(
				'date(created_date)' => date('Y-m-d'),
				'pharmacy_id' => $user->pharmacy_id
			);
			$ph = "P".$user->pharmacy_id;
			$count = count($user->pharmacy_id);
			$len = 7 + $count;
		}
		$row = $this->CI->db
						->select('sale_no','id')
						->where($where)
						->order_by('id','desc')
						->get($table)
						->row();

			//print_r($where);exit;
		if (!$row) {
			$sale_no = $ph.date('ymd')."1";
		} else {
			$inc = substr($row->sale_no, $len);
			$inc++;
			$sale_no = $ph.date('ymd').$inc;
		}
		return $sale_no;
	}


	/*      return    mr_no    */


	public function getSaleReturnNo($type, $user)
    {
		if ($type == 1) {
			$table = "bf_pharmacy_sale_return_mst";
			$where = array(
				'date(created_date)' => date('Y-m-d')
			);
			$ph = "PR";
			$len = 8;
		} else {
			$table = "bf_pharmacy_indoor_sale_return_mst";
			$where = array(
				'date(created_date)' => date('Y-m-d'),
				'pharmacy_id' => $user->pharmacy_id
			);
			$ph = "PR".$user->pharmacy_id;
			$count = count($user->pharmacy_id);
			$len = 8 + $count;
		}
		$row = $this->CI->db
						->select('mr_no','id')
						->where($where)
						->order_by('id','desc')
						->get($table)
						->row();

			//print_r($where);exit;
		if (!$row) {
			$mr_no = $ph.date('ymd')."1";
		} else {
			$inc = substr($row->mr_no, $len);
			$inc++;
			$mr_no = $ph.date('ymd').$inc;
		}
		return $mr_no;
	}


	/*          tranjaction payment       */

	public function pharmacyTranjactionPayment($data = array(),$current_user=0,$type=1,$customer_type=0) 
	{
		$tr_arr = array(
			'amount' 				=> $data['due_paid'],
			'type' 					=> $type,
			'patient_id' 			=> $data['patient_id'],
			'admission_patient_id' 	=> $data['admission_id'],
			'employee_id' 			=> $data['employee_id'],
			'customer_id' 			=> $data['customer_id'],
			'source_id' 	        => isset($data['source_id'])?$data['source_id']:0,
			'return_bill' 			=> isset($data['return_bill'])?$data['return_bill']:0,
			'return_less_discount' 	=> isset($data['return_less_discount'])?$data['return_less_discount']:0,
			'overall_discount'      => isset($data['overall_discount'])?$data['overall_discount']:0,
			'customer_type' 		=> $customer_type,
			'collection_by' 		=> $current_user->id
			);
		$this->CI->db->insert('pharmacy_payment_transaction', $tr_arr);
		$id = $this->CI->db->insert_id();
		return $id;
	}

	/*         sub pharmacy tranjaction payment       */

	public function subPharmacyTranjactionPayment($data = array(),$current_user=0,$type=1,$customer_type=0) 
	{
		//echo '<pre>';print_r($data);exit;
		$tr_arr = array(
			'amount' 				=> $data['paid_amount'],
			'type' 					=> $type,
			'patient_id' 			=> $data['patient_id'],
			'admission_id' 			=> $data['admission_id'],
			'employee_id' 			=> $data['employee_id'],
			'customer_id' 			=> $data['customer_id'],
			'source_id' 	        => isset($data['source_id'])?$data['source_id']:0,
			'return_bill' 			=> isset($data['return_bill'])?$data['return_bill']:0,
			'return_less_discount' 	=> isset($data['return_less_discount'])?$data['return_less_discount']:0,
			'overall_discount'      => isset($data['overall_discount'])?$data['overall_discount']:0,
			'customer_type' 		=> $customer_type,
			'collection_by' 		=> $current_user->id,
			'pharmacy_id' 			=> $current_user->pharmacy_id
			);
		$this->CI->db->insert('pharmacy_sub_payment_transaction', $tr_arr);
		$id = $this->CI->db->insert_id();
		return $id;
	}

	 public function getMedicineDueSaleNo($customer_type, $client_id, $paid_due, $pharmacy_id, $q = 0, $create_time='')
    {
    	$sale_table = 'bf_pharmacy_sales_mst';
    	$tr_table = 'bf_pharmacy_payment_transaction';
    	$r_table = 'bf_pharmacy_sale_return_mst';
    	if ($pharmacy_id != 200) {
    		$sale_table = 'bf_pharmacy_indoor_sales_mst';
    		$tr_table = 'bf_pharmacy_sub_payment_transaction';
    		$r_table = 'bf_pharmacy_indoor_sale_return_mst';
    	}

     	$condition = '';
		$con = '';
		$admission_id = 0;
		$patient_id = 0;
		$customer_id = 0;
		$employee_id = 0;
		if($create_time) {
			//$condition .=" AND UNIX_TIMESTAMP(psm.created_date) <= UNIX_TIMESTAMP('$create_time')";
		}
		
		$condition .= " AND psm.customer_type = $customer_type";
		if ($customer_type == 1) {
            $condition .= " AND psm.admission_id = $client_id";
        } elseif ($customer_type == 2) { 
            $condition .= " AND psm.patient_id = $client_id";
        } elseif ($customer_type == 3) {
            $condition .= " AND psm.customer_id = $client_id";
        } elseif ($customer_type == 4 || $customer_type == 5) {
            $condition .= " AND psm.employee_id = $client_id";
        }

        if ($q) {
        	 $con .= " AND psm.sale_no LIKE '%$q%' ";
        }
      $sql = "
        SELECT
          SQL_CALC_FOUND_ROWS
            psm.id,
            psm.sale_no as mr_no,
            psm.customer_type,
            psm.created_date,
            (
              CASE
                  WHEN psm.customer_type = 1 THEN psm.admission_id
                  WHEN psm.customer_type = 2 THEN psm.patient_id
                  WHEN psm.customer_type = 3 THEN psm.customer_id
                  WHEN psm.customer_type = 5 || psm.customer_type = 4 THEN psm.employee_id
                  WHEN psm.customer_type = 6 THEN 6
              END
            ) AS client_id,
            (
              (
                IF(
                  (psm.tot_bill) > (psm.tot_paid),

                  (
                    (psm.tot_bill)
                    -
                    (
                      (psm.tot_less_discount)
                      +
                      (psm.tot_paid)
                    )
                  ),

                  (
                    (psm.tot_paid)
                    -
                    (
                      (psm.tot_less_discount)
                      +
                      (psm.tot_bill)
                    )
                  )

                )
                /*--   endif       --*/
              ) 
              -
              (
                (IFNULL(SUM(dppt.amount), 0))
                +
                (IFNULL(SUM(dppt.overall_discount), 0))
              )
              -
              (
                IF(
                  (psm.return_bill) > (IFNULL(SUM(rpsm.tot_paid_return_amount), 0) ),

                  (
                    (psm.return_bill)
                    -
                    (
                      (psm.return_less_discount)
                      +
                      (IFNULL(SUM(rpsm.overall_discount), 0))
                      +
                      (IFNULL(SUM(rpsm.tot_paid_return_amount), 0) )
                    )
                  ),

                  (
                    (IFNULL(SUM(rpsm.tot_paid_return_amount), 0) )
                    -
                    (
                      (psm.return_less_discount)
                      +
                      (IFNULL(SUM(rpsm.overall_discount), 0))
                      +
                      (psm.return_bill)
                    )
                  )
                )
                 /*--   endif       --*/
              )
            ) as due

          FROM 
            {$sale_table} as psm
          LEFT JOIN
          (
            SELECT 
              trpsm.sale_id,
              IFNULL(SUM(trpsm.tot_paid_return_amount), 0) as tot_paid_return_amount,
              IFNULL(SUM(trpsm.overall_discount), 0) as overall_discount
            FROM 
              {$r_table} as trpsm
            GROUP BY
              trpsm.sale_id
          ) as rpsm
           	ON rpsm.sale_id = psm.id
         LEFT JOIN
         (
            SELECT 
              tdppt.source_id,
              IFNULL(SUM(tdppt.amount), 0) as amount,
              IFNULL(SUM(tdppt.overall_discount), 0) as overall_discount
            FROM 
              {$tr_table} as tdppt
            WHERE
              tdppt.type = 2
            GROUP BY 
              tdppt.source_id
         ) as dppt
          	ON psm.id = dppt.source_id
          WHERE 
            psm.id > 0
              {$condition}
              {$con}
          GROUP BY
            psm.id
          HAVING 
          	due > 0
      ";

      $result = $this->CI->db->query($sql)->result();

      return $result;
    }


	private function getClientInfo($customer_type, $client_id = 0)
	{
		$admission_id = 0;
		$patient_id = 0;
		$customer_id = 0;
		$employee_id = 0;
		if ($customer_type == 1) {
            $admission_id = isset($client_id) ? $client_id : 0;
        } elseif ($customer_type == 2) { 
            $patient_id = isset($client_id) ? $client_id : 0;;
        } elseif ($customer_type == 3) {
            $customer_id = isset($client_id) ? $client_id : 0;;
        } elseif ($customer_type == 4 || $customer_type == 5) {
            $employee_id = isset($client_id) ? $client_id : 0;
        }

        $result = [
        	'admission_id' => $admission_id,
        	'patient_id' => $patient_id,
        	'customer_id' => $customer_id,
        	'employee_id' => $employee_id
        ];

        return $result;
	}


	public function getTotalSumBySaleNo($customer_type, $client_id, $all_paid, $pharmacy_id, $con = [], $overall_discount = 0)
	{
		$time = '';
		$result = $this->getMedicineDueSaleNo($customer_type, $client_id, $all_paid, $pharmacy_id, $con, $time);
		$sum = 0;
		$average = 0;
		if (!$result) {
			return false;
		}
			foreach ($result as $key => $val) {
				$s_due = $val->due;
				if ($all_paid > 0) {
					$sum += $s_due;
				}
			 $all_paid -= $s_due;
			}
		return $sum;
	}

	public function getPharmacyDueSaleNo($customer_type, $client_id, $due_paid, $pharmacy_id, $con = [], $overall_discount = 0, $created_time='')
	{
    //echo '<pre>';print_r($pharmacy_id);exit();
		$all_paid = ($due_paid + $overall_discount);
		$result = $this->getMedicineDueSaleNo($customer_type, $client_id, $all_paid, $pharmacy_id, $con, $created_time);
		//echo '<pre>';print_r($result);exit();

		$total_sum = $this->getTotalSumBySaleNo($customer_type, $client_id, $all_paid, $pharmacy_id, $con = [], $overall_discount);
		//echo '<pre>';print_r($total_sum);exit;

		//$due_mr_no = $this->dgetDuePaidSaleNo(200, $created_time);

		$due_mr_no = $this->getDuePaidSaleNo(1, 200);

		$client_info = $this->getClientInfo($customer_type, $client_id);
		$admission_id = "admission_patient_id";
		if ($pharmacy_id != 200) {
			$admission_id = "admission_id";
			$due_mr_no = $this->getDuePaidSaleNo(0, $pharmacy_id);
			//$due_mr_no = $this->dgetDuePaidSaleNo($pharmacy_id, $created_time);
		}

		if (!$result) {
			return false;
		}

		$data_arr = [];
			foreach ($result as $key => $val) {
				$s_due = $val->due;
				if ($all_paid > 0) {
					$average = ($overall_discount == 0) ? 0 :round((($s_due* $overall_discount)/$total_sum),2);
					$net_amount = ($s_due - $average);
					$payment = (($due_paid > 0) ? $net_amount : 0);
					$net_payment = ($payment > $due_paid) ? $due_paid : $payment;
					$data_arr[] = [
					'due_mr_no' => $due_mr_no,
					'pharmacy_id' => $pharmacy_id,
					'customer_id' => $client_info['customer_id'],
					'employee_id' => $client_info['employee_id'],
					'patient_id' => $client_info['patient_id'],
					$admission_id => $client_info['admission_id'],
					'customer_type' => $customer_type,
					'amount' => ($net_payment > 0) ? $net_payment : 0,
					'overall_discount' => $average, 
					'type' =>2,
					'collection_by' => $_SESSION['user_id'],
					'source_id' => $val->id
				];
				}
			 $due_paid -= $net_amount;
			 $all_paid -= $s_due;
			}
		//echo '<pre>';print_r($data_arr);exit;
		return $data_arr;
	}

	public function dgetDuePaidSaleNo($pharmacy_id, $date_time)
    {
		if ($pharmacy_id == 200) {
			$table = "pharmacy_payment_transaction";
			$where = array(
				'date(create_time)' => custom_date_format($date_time,'Y-m-d')
			);
			$ph = "PD";
			$len = 8;
		} else {
			$table = "pharmacy_sub_payment_transaction";
			$where = array(
				//'date(create_time)' => date('Y-m-d'),
				'date(create_time)' => custom_date_format($date_time,'Y-m-d'),
				'pharmacy_id' => $pharmacy_id
			);
			//$user->pharmacy_id
			$ph = "PR".$pharmacy_id;
			$count = count($pharmacy_id);
			$len = 8 + $count;
		}
		$row = $this->CI->db
						->select('due_mr_no','id')
						->where($where)
						->where('d_status', 2)
						->order_by('id','desc')
						->get($table)
						->row();

			//print_r($where);exit;
		if (!$row) {
			//$due_mr_no = $ph.date('ymd')."1";
			$due_mr_no = $ph.custom_date_format($date_time,'ymd')."1";
		} else {
			$inc = substr($row->due_mr_no, $len);
			$inc++;
			//$due_mr_no = $ph.date('ymd').$inc;
			$due_mr_no = $ph.custom_date_format($date_time,'ymd').$inc;
		}
		return $due_mr_no;
	}

	/*       get due paid mr_no       */

	public function getDuePaidSaleNo($type, $pharmacy_id)
    {
		if ($type == 1) {
			$table = "pharmacy_payment_transaction";
			$where = array(
				'date(create_time)' => date('Y-m-d')
			);
			$ph = "PD";
			$len = 8;
		} else {
			$table = "pharmacy_sub_payment_transaction";
			$where = array(
				'date(create_time)' => date('Y-m-d'),
				'pharmacy_id' => $pharmacy_id
			);
			//$user->pharmacy_id
			$ph = "PR".$pharmacy_id;
			$count = count($pharmacy_id);
			$len = 8 + $count;
		}
		$row = $this->CI->db
						->select('due_mr_no','id')
						->where($where)
						->where('type', 2)
						->order_by('id','desc')
						->get($table)
						->row();

			//print_r($where);exit;
		if (!$row) {
			$due_mr_no = $ph.date('ymd')."1";
		} else {
			$inc = substr($row->due_mr_no, $len);
			$inc++;
			$due_mr_no = $ph.date('ymd').$inc;
		}
		return $due_mr_no;
	}


	public function getPharmacyDueSaleNoBySaleId($customer_type, $client_id, $due, $sal_id, $pharmacy_id, $overall_discount = 0)
	{
		$average = 0;
		$count = count($sal_id);
		$due_mr_no = $this->getDuePaidSaleNo(1, 200);

		$client_info = $this->getClientInfo($customer_type, $client_id);
		$total_sum = $this->getTotalSum($count, $due);
		$admission_id = "admission_patient_id";
		if ($pharmacy_id != 200) {
			$admission_id = "admission_id";
			$due_mr_no = $this->getDuePaidSaleNo(0, $pharmacy_id);
		}

		for ($i=0; $i < $count; $i++) { 
			$discount = ($overall_discount == 0) ? 0 :round((($due[$i]* $overall_discount)/$total_sum),2);
			$data_arr[] = [
					'due_mr_no' => $due_mr_no,
					'pharmacy_id' => $pharmacy_id,
					'customer_id' => $client_info['customer_id'],
					'employee_id' => $client_info['employee_id'],
					'patient_id' => $client_info['patient_id'],
					$admission_id => $client_info['admission_id'],
					'customer_type' => $customer_type,
					'amount' => ($due[$i] - $discount),
					'overall_discount' => $discount,
					'type' =>2,
					'collection_by' => $_SESSION['user_id'],
					'source_id' => $sal_id[$i]
				];
		}

		//echo '<pre>';print_r($data_arr);exit;

		return $data_arr;
	}

	private function getTotalSum($count, $amount) {
		$sum = 0;
		for ($i=0; $i < $count; $i++) { 
			$sum += $amount[$i];
		}
		return $sum;
	}
}
